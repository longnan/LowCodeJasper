package org.my.process;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.Iterator;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.lowagie.text.Anchor;
import com.lowagie.text.Chapter;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Element;
import com.lowagie.text.Font;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.Section;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;

public class convertExcel2PDF {
	static String File_Directory = "/home/red1/Documents/FactAcctReport.xls";
	private static short numberOfColumns; 
	final static Font catFont = new Font(18,
            Font.BOLD);
	public static void main(String[] args) {  
         File xlsFile = new File(File_Directory); 
         Workbook workbook; 
         try { 
                     workbook = loadSpreadSheet(xlsFile); 
                     readSpreadSheet(workbook); 
         } catch (FileNotFoundException e) {  
                     System.err.println("Excel File (or) PDF File is already opened. Please close the file");
                     System.exit(1); 
         } catch (Exception e) { 
                     e.printStackTrace(); 
         } 
	}

	private static Workbook loadSpreadSheet(File xlsFile) throws Exception { 
             Workbook workbook = null; 
             String ext = getFileExtension(xlsFile.getName()); 
             if (ext.equalsIgnoreCase("xlsx")) { 
                        OPCPackage pkg = OPCPackage.open(xlsFile.getAbsolutePath());
                        workbook = new XSSFWorkbook(pkg); 
                        pkg.close(); 
             } else if (ext.equalsIgnoreCase("xls")) { 
                        InputStream xlsFIS = new FileInputStream(xlsFile); 
                        workbook = new HSSFWorkbook(xlsFIS); 
                        xlsFIS.close(); 
             } else { 
                   throw new Exception("FILE EXTENSION NOT RECOGNIZED");
             } 
             return workbook; 
            }
	
	private static String getFileExtension(String fileName) { 
                String ext = ""; 
                int mid = fileName.lastIndexOf("."); 
                ext = fileName.substring(mid + 1, fileName.length()); 
                System.out.println("File Extension --" + ext); 
                return ext; 
    }
	 private static void addMetaData(Document document) { 
         document.addTitle("My first PDF"); 
         document.addSubject("Using iText"); 
         document.addKeywords("Java, PDF, iText"); 
         document.addAuthor("red1"); 
         document.addCreator("red1");
}
	 private static void addTitlePage(Document document) 
             throws DocumentException { 
		 Paragraph preface = new Paragraph();
		 // We add one empty line
		 addEmptyLine(preface, 1);
		 // Lets write a big header
		 preface.add(new Paragraph("Title of the document", catFont));
 addEmptyLine(preface, 1);
 // Will create: Report generated by: _name, _date
 preface.add(new Paragraph("Report generated by: " + "red1" + ", "
                         + new Date()));
 addEmptyLine(preface, 3);
 preface.add(new Paragraph(
                         "This document describes something which is very important "));
 addEmptyLine(preface, 8);
 preface.add(new Paragraph(
                         "This document is a preliminary version  ;-)."));
 document.add(preface);
 // Start a new page
 document.newPage();
}

	private static void readSpreadSheet(Workbook workbook) throws IOException, DocumentException {
		 	Document doc = new Document(); 
			PdfWriter.getInstance(doc, new FileOutputStream("/home/red1/Documents/Output.pdf"));
			doc.open(); 
            addMetaData(doc); 
            addTitlePage(doc);
			
				Anchor anchor = new Anchor("First Chapter", catFont);
				anchor.setName("First Chapter");
				// Second parameter is the number of the chapter
				Chapter catPart = new Chapter(1);
				Paragraph subPara = new Paragraph("Table");
				Section subCatPart = catPart.addSection(subPara);
				addEmptyLine(subPara, 5);
				Sheet sheet = workbook.getSheetAt(2);
				// Iterate through each rows from first sheet
				Iterator<Row> rowIterator = sheet.iterator();
				int temp = 0;
				boolean flag = true;
				PdfPTable table = null;
				while (rowIterator.hasNext()) {
					Row row = rowIterator.next();
					int cellNumber = 0;
					if (flag) {
						table = new PdfPTable(row.getLastCellNum());
						flag = false;
					}

					// For each row, iterate through each columns
					Iterator<Cell> cellIterator = row.cellIterator();
					while (cellIterator.hasNext()) {
						Cell cell = cellIterator.next();
						switch (cell.getCellType()) {  

						case STRING:
							if (temp == 0) { 
								numberOfColumns = row.getLastCellNum();
								PdfPCell c1 = new PdfPCell(new Phrase(
										cell.getStringCellValue()));
								c1.setHorizontalAlignment(Element.ALIGN_CENTER);
								table.addCell(c1);
								table.setHeaderRows(1);
                            }else{
                                   cellNumber =checkEmptyCellAndAddCellContentToPDFTable(cellNumber,cell,table);
                            }
                            cellNumber++;
                            break;
						case NUMERIC:
                            cellNumber =checkEmptyCellAndAddCellContentToPDFTable(cellNumber,cell,table);
                            cellNumber++;
                            break;
                }    
    	}
    	temp = 1;
    	if(numberOfColumns != cellNumber){
                for(int i=0;i<(numberOfColumns-cellNumber);i++){
                            table.addCell(" ");
                }
    		}
		}
		subCatPart.add(table);
		// Now add all this to the document
		doc.add(catPart);
		doc.close();

	}
	private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
                    paragraph.add(new Paragraph(" "));
        }
	}
	
	private static int checkEmptyCellAndAddCellContentToPDFTable(int cellNumber, Cell cell, PdfPTable table) {

        if (cellNumber == cell.getColumnIndex()) {

                    if(cell.getCellType() == CellType.NUMERIC){

                                table.addCell(Double.toString(cell.getNumericCellValue()));

                    }

                    if(cell.getCellType() == CellType.STRING){

                                table.addCell(cell.getStringCellValue());

                    }

       

        } else {

                    while( cellNumber < cell.getColumnIndex()) {

                                 

                                            table.addCell(" ");

                                            cellNumber++;

                               

                    }

                    if (cellNumber == cell.getColumnIndex()) {

                                if(cell.getCellType() == CellType.NUMERIC){

                                            table.addCell(Double.toString(cell.getNumericCellValue()));

                                }

                                if(cell.getCellType() == CellType.STRING){

                                            table.addCell(cell.getStringCellValue());

                                }

                               

                    }

                    cellNumber = cell.getColumnIndex();

        }         

       

        return cellNumber;

}
}
